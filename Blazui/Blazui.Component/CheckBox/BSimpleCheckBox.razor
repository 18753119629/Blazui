@using  Blazui.Component.EventArgs
@{
    var isChecked = string.Empty;
    var isIndeterminate = string.Empty;
    switch (Status)
    {
        case Status.UnChecked:
            isChecked = string.Empty;
            isIndeterminate = string.Empty;
            break;
        case Status.Checked:
            isChecked = "is-checked";
            isIndeterminate = string.Empty;
            break;
        case Status.Indeterminate:
            isChecked = string.Empty;
            isIndeterminate = "is-indeterminate";
            break;
    }
    <label role="checkbox" aria-checked="true" class="el-checkbox @isChecked @isDisabled">
        <span aria-checked="mixed" class="el-checkbox__input @isChecked @isDisabled @isIndeterminate">
            <span class="el-checkbox__inner"></span>
            <input type="checkbox" aria-hidden="true" onchange="@ChangeStatus" class="el-checkbox__original @isDisabled" value="" />
        </span>
        <span class="el-checkbox__label">
            @ChildContent
        </span>
    </label>
}

@functions{
    private string isDisabled;

    [Parameter]
    public object Tag { get; set; }

    [Parameter]
    public Status Status { get; set; }

    [Parameter]
    public object TrueValue { get; set; }

    [Parameter]
    public object FalseValue { get; set; }

    [Parameter]
    private EventCallback<UIChangeEventArgs> OnStatusChanged { get; set; }

    void ChangeStatus(UIChangeEventArgs uIMouseEvent)
    {
        if (IsDisabled)
        {
            return;
        }
        var oldValue = new CheckBoxValue()
        {
            Status = Status
        };
        var newValue = new CheckBoxValue();
        switch (Status)
        {
            case Status.UnChecked:
                oldValue.Value = FalseValue;
                Status = Status.Checked;
                newValue.Value = TrueValue;
                Console.WriteLine(newValue.Value);
                break;
            case Status.Checked:
                Status = Status.UnChecked;
                oldValue.Value = TrueValue;
                newValue.Value = FalseValue;
                break;
            case Status.Indeterminate:
                Status = Status.Checked;
                break;
        }
        newValue.Status = Status;
        var args = new ChangeEventArgs<CheckBoxValue>();
        args.OldValue = oldValue;
        args.NewValue = newValue;
        OnStatusChanged.InvokeAsync(args).GetAwaiter().GetResult();
    }

    [Parameter]
    private bool IsDisabled
    {
        get
        {
            return isDisabled == "is-disabled";
        }
        set
        {
            if (value)
            {
                isDisabled = "is-disabled";
            }
            else
            {
                isDisabled = null;
            }
        }
    }

    [Parameter]
    private RenderFragment ChildContent { get; set; }
}
