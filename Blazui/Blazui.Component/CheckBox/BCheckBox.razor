@typeparam TModel
@foreach (var item in models)
{
    <BSimpleCheckBox IsChecked="@item.IsChecked" IsDisabled="item.IsDisabled">@item.Label</BSimpleCheckBox>
}

@functions{
    //private string isChecked;
    //private string disabled;

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    [Parameter]
    private Func<TModel, bool> IsChecked { get; set; }

    [Parameter]
    private IEnumerable<TModel> SelectedItems { get; set; }

    [Parameter]
    protected List<TModel> For { get; set; }

    private IList<CheckBoxOption> models { get; set; }

    protected bool IsCollectionDataSource()
    {
        return For != null;
    }

    protected bool ModelItemIsSimpleType { get; set; }

    protected override void OnInit()
    {
        if (IsCollectionDataSource())
        {
            var type = typeof(TModel);
            ModelItemIsSimpleType = type.IsValueType || type.IsPrimitive || type == typeof(string);
            if (ModelItemIsSimpleType)
            {
                models = new List<CheckBoxOption>();
                foreach (var item in For)
                {
                    models.Add(ConvertModelItem(item));
                }
            }
        }
    }

    private CheckBoxOption ConvertModelItem(TModel modelItem)
    {
        if (ModelItemIsSimpleType)
        {
            var isChecked = false;
            if (IsChecked != null)
            {
                isChecked = IsChecked(modelItem);
            }
            return new CheckBoxOption()
            {
                IsChecked = isChecked,
                IsDisabled = false,
                Label = Convert.ToString(modelItem)
            };
        }
        return null;
    }
}