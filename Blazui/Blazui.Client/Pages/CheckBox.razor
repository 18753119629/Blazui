
@page "/checkbox"
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
<div>
    动态渲染：
    <br />
    <BCheckBox For="@values" IsChecked="@((item)=>selectedValues.Contains(item))"></BCheckBox>
    <br />
    <BCheckBox For="@values" SelectedItems="@selectedValues"></BCheckBox>
</div>
<div>
    硬编码：
    <br />
    <BSimpleCheckBox Status="@status2" TrueValue="1" FalseValue="0" OnStatusChanged="@ChangeValue1">硬编码选项 @value1</BSimpleCheckBox>
    <BSimpleCheckBox>硬编码选项2</BSimpleCheckBox>
    <BSimpleCheckBox IsDisabled="true">硬编码选项3</BSimpleCheckBox>
</div>
<div>
    复选框组：
    <br />
    <BCheckBoxGroup>
        <BCheckBox For="@values" IsChecked="@((item)=>selectedValues.Contains(item))"></BCheckBox>
    </BCheckBoxGroup>
</div>
<div>
    复选框组（已选中数据：@string.Join(",", selectedValues)）：
    <br />
    <BSimpleCheckBox Status="@status1" OnStatusChanged="@SelectAll">全选</BSimpleCheckBox>
    <BCheckBoxGroup>
        <BCheckBox OnStatusChanged="@OnSelectAllStatusChagned" For="@values" IsChecked="@IsChecked"></BCheckBox>
    </BCheckBoxGroup>
</div>
<div>
    复选框组（至少选择1项，最多选择两项）：
    <br />
    <BCheckBoxGroup>
        <BCheckBox OnStatusChanged="@OnSelectAllStatusChagned" For="@values" IsChecked="@IsChecked"></BCheckBox>
    </BCheckBoxGroup>
</div>
@functions{
    private void ChangeValue1(UIChangeEventArgs e)
    {
        var args = (ChangeEventArgs<CheckBoxValue>)e;
        value1 = Convert.ToInt32(args.NewValue.Value);
        Console.WriteLine(value1);
        status2 = args.NewValue.Status;

    }
    private int value1;
    private Status status1 = Status.Indeterminate;
    private Status status2 = Status.Checked;
    private List<string> selectedValues;
    private List<string> values;

    protected override void OnInit()
    {
        selectedValues = new List<string>()
{
                "列表选项1",
                "列表选项3"
            };
        values = new List<string>()
{
                    "列表选项1",
                    "列表选项2",
                    "列表选项3"
                };
    }

    void SelectAll(UIChangeEventArgs e)
    {
        var args = (ChangeEventArgs<CheckBoxValue>)e;
        status1 = args.NewValue.Status;
        if (status1 == Status.Checked)
        {
            selectedValues = new List<string>(values);
        }
        else if (status1 == Status.UnChecked)
        {
            selectedValues = new List<string>();
        }
    }

    private bool IsChecked(string item)
    {
        return selectedValues.Contains(item);
    }

    void OnSelectAllStatusChagned(UIChangeEventArgs e)
    {
        var args = (ChangeEventArgs<CheckBoxValue>)e;
        var status = args.NewValue.Status;
        var item = args.NewValue;
        if (status == Status.Checked)
        {
            selectedValues.Add(item.Value.ToString());
        }
        else if (status == Status.UnChecked)
        {
            selectedValues.Remove(item.Value.ToString());
        }
        if (values.Count == selectedValues.Count)
        {
            status1 = Status.Checked;
        }
        else if (selectedValues.Count <= 0)
        {
            status1 = Status.UnChecked;
        }
        else if (values.Count > selectedValues.Count)
        {
            status1 = Status.Indeterminate;
        }
    }
}