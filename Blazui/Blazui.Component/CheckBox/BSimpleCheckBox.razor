<label role="checkbox" aria-checked="true" class="el-checkbox @isChecked @isDisabled">
    <span aria-checked="mixed" class="el-checkbox__input @isChecked @isDisabled @isIndeterminate">
        <span class="el-checkbox__inner"></span>
        <input type="checkbox" aria-hidden="true" onclick="@changeStatus" class="el-checkbox__original @isDisabled" value="" />
    </span>
    <span class="el-checkbox__label">
        @ChildContent
    </span>
</label>

@functions{
    private string isChecked;
    private string isIndeterminate;
    private string isDisabled;

    [Parameter]
    private object Tag { get; set; }

    [Parameter]
    private Status Status
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(isChecked))
            {
                return Status.Checked;
            }
            if (!string.IsNullOrWhiteSpace(isIndeterminate))
            {
                return Status.Indeterminate;
            }
            return Status.UnChecked;
        }
        set
        {
            switch (value)
            {
                case Status.UnChecked:
                    isChecked = null;
                    isIndeterminate = null;
                    break;
                case Status.Checked:
                    isChecked = "is-checked";
                    isIndeterminate = null;
                    break;
                case Status.Indeterminate:
                    isChecked = null;
                    isIndeterminate = "is-indeterminate";
                    break;
            }
            OnStatusChanged.InvokeAsync(null).GetAwaiter().GetResult();
        }
    }

    [Parameter]
    private EventCallback<UIMouseEventArgs> OnStatusChanged { get; set; }

    void changeStatus(UIMouseEventArgs uIMouseEvent)
    {
        OnStatusChanged.InvokeAsync(null).GetAwaiter().GetResult();
        //if (IsDisabled)
        //{
        //    return;
        //}
        //switch (Status)
        //{
        //    case Status.Indeterminate:
        //        Status = Status.Checked;
        //        break;
        //    case Status.Checked:
        //        Status = Status.UnChecked;
        //        break;
        //    case Status.UnChecked:
        //        Status = Status.Checked;
        //        break;
        //}
    }

    [Parameter]
    private bool IsDisabled
    {
        get
        {
            return isDisabled == "is-disabled";
        }
        set
        {
            if (value)
            {
                isDisabled = "is-disabled";
            }
            else
            {
                isDisabled = null;
            }
        }
    }

    [Parameter]
    private RenderFragment ChildContent { get; set; }
}
