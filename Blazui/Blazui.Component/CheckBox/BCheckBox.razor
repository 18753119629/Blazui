@typeparam TModel
@foreach (var item in models)
{
    <BSimpleCheckBox Status="@item.Status" Tag="@item" OnStatusChanged="@OnInnerStatusChanged" IsDisabled="item.IsDisabled">@item.Label</BSimpleCheckBox>
}

@functions{

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    [Parameter]
    private Func<TModel, bool>
    IsChecked
    { get; set; }

    [Parameter]
    private Func<TModel, bool>
        IsIndeterminate
    { get; set; }

    [Parameter]
    private IList<TModel>
        SelectedItems
    { get; set; }

    [Parameter]
    protected IList<TModel>
        For
    { get; set; }

    private IList<CheckBoxOption>
        models
    { get; set; }

    private void OnInnerStatusChanged(UIMouseEventArgs e)
    {
        //var option = (CheckBoxOption)tag;
        //var model = (TModel)Convert.ChangeType(option.Label, typeof(TModel));
        //if (SelectedItems != null)
        //{
        //    if (status == Status.Checked)
        //    {
        //        lock (SelectedItems)
        //        {
        //            if (!SelectedItems.Contains(model))
        //            {
        //                SelectedItems.Add(model);
        //            }
        //        }
        //    }
        //    else if (status == Status.UnChecked)
        //    {
        //        lock (SelectedItems)
        //        {
        //            SelectedItems.Remove(model);
        //        }
        //    }
        //}
        if (OnStatusChanged.HasDelegate)
        {
            OnStatusChanged.InvokeAsync(null).GetAwaiter().GetResult();
        }
    }
    [Parameter]
    private EventCallback<UIMouseEventArgs> OnStatusChanged { get; set; }

    protected bool ModelItemIsSimpleType { get; set; }

    protected override void OnInit()
    {
        if (For == null)
        {
            return;
        }
        var type = typeof(TModel);
        ModelItemIsSimpleType = type.IsValueType || type.IsPrimitive || type == typeof(string);
        if (ModelItemIsSimpleType)
        {
            models = new List<CheckBoxOption>
                ();
            foreach (var item in For)
            {
                models.Add(ConvertModelItem(item));
            }
        }
    }

    private CheckBoxOption ConvertModelItem(TModel modelItem)
    {
        if (ModelItemIsSimpleType)
        {
            Status status = CheckBox.Status.Checked;
            if (IsChecked != null)
            {
                status = IsChecked(modelItem) ? Status.Checked : Status.UnChecked;
            }

            if (IsIndeterminate != null)
            {
                status = IsIndeterminate(modelItem) ? Status.Indeterminate : Status.UnChecked;
            }
            return new CheckBoxOption()
            {
                Status = status,
                IsDisabled = false,
                Label = Convert.ToString(modelItem)
            };
        }
        return null;
    }
}
