@using  Blazui.Component.EventArgs
@typeparam TModel
@foreach (var item in models)
{
    <BSimpleCheckBox Status="@item.Status" OnStatusChanged="@OnInnerStatusChanged" IsDisabled="item.IsDisabled" TrueValue="@item.TrueValue" FalseValue="@item.FalseValue">@item.Label</BSimpleCheckBox>
}

@functions{

    [Parameter]
    protected RenderFragment ChildContent { get; set; }

    [Parameter]
    private Func<TModel, bool> IsChecked { get; set; }

    [Parameter]
    private Func<TModel, bool> IsIndeterminate { get; set; }

    [Parameter]
    private IList<TModel> SelectedItems { get; set; }

    [Parameter]
    protected IList<TModel> For { get; set; }

    [Parameter]
    private Func<TModel, object> TrueValue { get; set; }

    [Parameter]
    private Func<TModel, object>
        FalseValue
    { get; set; }

    [Parameter]
    private Func<TModel, string>
        Label
    { get; set; }

    protected IList<CheckBoxOption> models { get; set; }

    protected void OnInnerStatusChanged(UIChangeEventArgs e)
    {
        var args = (ChangeEventArgs<CheckBoxValue>
            )e;
        Console.WriteLine(args.NewValue);
        var option = args.NewValue;
        var model = (TModel)Convert.ChangeType(option.Value, typeof(TModel));
        if (SelectedItems != null)
        {
            if (option.Status == Status.Checked)
            {
                lock (SelectedItems)
                {
                    if (!SelectedItems.Contains(model))
                    {
                        SelectedItems.Add(model);
                    }
                }
            }
            else if (option.Status == Status.UnChecked)
            {
                lock (SelectedItems)
                {
                    SelectedItems.Remove(model);
                }
            }
        }
        if (OnStatusChanged.HasDelegate)
        {
            OnStatusChanged.InvokeAsync(e).GetAwaiter().GetResult();
        }
    }

    [Parameter]
    private EventCallback<UIChangeEventArgs>
        OnStatusChanged
    { get; set; }

    protected bool ModelItemIsSimpleType { get; set; }

    protected override void OnParametersSet()
    {
        if (For == null)
        {
            return;
        }
        var type = typeof(TModel);
        ModelItemIsSimpleType = type.IsValueType || type.IsPrimitive || type == typeof(string);
        if (ModelItemIsSimpleType)
        {
            models = new List<CheckBoxOption>
                ();
            foreach (var item in For)
            {
                models.Add(ConvertModelItem(item));
            }
        }
    }

    private CheckBoxOption ConvertModelItem(TModel modelItem)
    {
        if (ModelItemIsSimpleType)
        {
            Status status = CheckBox.Status.Checked;
            if (IsChecked != null)
            {
                status = IsChecked(modelItem) ? Status.Checked : Status.UnChecked;
            }

            if (IsIndeterminate != null)
            {
                status = IsIndeterminate(modelItem) ? Status.Indeterminate : Status.UnChecked;
            }
            if (SelectedItems != null)
            {
                status = SelectedItems.Contains(modelItem) ? Status.Checked : Status.UnChecked;
            }

            var label = string.Empty;
            if (Label != null)
            {
                label = Label(modelItem);
            }
            else if (ModelItemIsSimpleType)
            {
                label = Convert.ToString(modelItem);
            }
            var option = new CheckBoxOption()
            {
                Status = status,
                TrueValue = TrueValue == null ? label : TrueValue(modelItem),
                FalseValue = FalseValue == null ? label : FalseValue(modelItem),
                IsDisabled = false,
                Label = label
            };
            return option;
        }
        return null;
    }

    public void Render()
    {
        this.StateHasChanged();
    }
}
